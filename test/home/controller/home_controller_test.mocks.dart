// Mocks generated by Mockito 5.3.2 from annotations
// in link_shortener/test/home/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:link_shortener/modules/link/models/link_alias.dart' as _i2;
import 'package:link_shortener/modules/link/repositories/link.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLinkAlias_0 extends _i1.SmartFake implements _i2.LinkAlias {
  _FakeLinkAlias_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ILinkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockILinkRepository extends _i1.Mock implements _i3.ILinkRepository {
  MockILinkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.LinkAlias> shortenUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #shortenUrl,
          [url],
        ),
        returnValue: _i4.Future<_i2.LinkAlias>.value(_FakeLinkAlias_0(
          this,
          Invocation.method(
            #shortenUrl,
            [url],
          ),
        )),
      ) as _i4.Future<_i2.LinkAlias>);
  @override
  _i4.Future<List<_i2.LinkAlias>> fetchLinks({int? limit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLinks,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<List<_i2.LinkAlias>>.value(<_i2.LinkAlias>[]),
      ) as _i4.Future<List<_i2.LinkAlias>>);
}
